# (Ï†) test_optimizations.Ï†
# test_optimizations.Î¦ - Test optimization features
Æ’ test_ast_optimizations():
    Ï€("ðŸ”¬ Testing AST optimizations...")

    # Mathematical constant optimizations
    import math
    circle_area = Ï€ * (5 ** 2)  # Ï€ should be resolved to 3.14159...
    Ï€(f"Circle area (r=5): {circle_area}")

    # Identity optimizations
    x = 100
    identity_tests = [
        x + 0,    # Should optimize to x
        x * 1,    # Should optimize to x
        x ** 2,   # Should optimize to x * x
        2 + 3,    # Should optimize to 5
        5 * 0     # Should optimize to 0
    ]

    Ï€(f"Identity optimizations: {identity_tests}")
    âŸ² identity_tests

Æ’ test_parallelization():
    Ï€("âš¡ Testing potential parallelization...")

    # Simple function for testing
    Æ’ square(x):
        âŸ² x * x

    # This might be parallelized if threshold is low enough
    small_test = [square(i) âˆ€ i âˆˆ range(100)]
    Ï€(f"Small test (100 items): {len(small_test)} results")

    # This should definitely be parallelized (if threshold allows)
    large_test = [square(i) âˆ€ i âˆˆ range(2000)]
    Ï€(f"Large test (2000 items): {len(large_test)} results")

    âŸ² len(large_test)

# Run optimization tests
test_ast_optimizations()
test_parallelization()